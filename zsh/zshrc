#!/usr/bin/env zsh

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export EDITOR=nvim
export TERM=xterm-256color
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
export PATH="$HOME/.dotfiles/etc/bin:$PATH"
export PATH="/Applications/Postgres.app/Contents/Versions/9.6/bin:$PATH"
export PATH="$PATH:${HOME}/.krew/bin"
export PATH="$PATH:${HOME}/.local/bin"

# force zsh-you-should-use
# export YSU_HARDCORE=1

# export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

# History
# https://unix.stackexchange.com/questions/273861/unlimited-history-in-zsh
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000000
SAVEHIST=10000000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

ulimit -n 8192

# POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(user dir vcs rbenv rspec_stats newline)
# POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator ip background_jobs history time)

# Prefer using emacs mode for zsh
bindkey -e

source ~/.zinit/bin/zinit.zsh

zinit light zinit-zsh/z-a-bin-gem-node

# Turbo mode with "wait"
zinit light-mode lucid wait for \
  is-snippet OMZ::lib/history.zsh \
  MichaelAquilina/zsh-you-should-use \
  romkatv/zsh-prompt-benchmark \
  zdharma/history-search-multi-word \
  mollifier/cd-gitroot
  # atload"alias zi='zinit'" \
  #   ajeetdsouza/zoxide

zinit ice wait"1" atload'_history_substring_search_bind_keys' lucid
zinit light zsh-users/zsh-history-substring-search

# Ref: zdharma/fast-syntax-highlighting
# Note: Use wait 1 second works for kubectl
zinit wait lucid for \
  atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
    zdharma/fast-syntax-highlighting \
  atload"zpcdreplay" wait"1" \
    OMZP::kubectl \
  blockf \
    zsh-users/zsh-completions \
  atload"!_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions \
  as"completion" is-snippet \
    https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker \
    https://github.com/docker/compose/blob/master/contrib/completion/zsh/_docker-compose

# LS_COLORS
zinit ice atclone"dircolors -b LS_COLORS > clrs.zsh" \
    atpull'%atclone' pick"clrs.zsh" nocompile'!' \
    atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”'
zinit light trapd00r/LS_COLORS

# ASDF
if [ -d "$HOME/.asdf" ]; then
#   zinit ice wait lucid
#   zinit light asdf-vm/asdf
# OR
  load_asdf() {
    source $HOME/.asdf/asdf.sh

    if [ -d "$HOME/.asdf/plugins/direnv" ]; then
      eval "$(asdf exec direnv hook zsh)"
      direnv() { asdf exec direnv "$@"; }
    fi
  }

  zinit light-mode wait lucid for \
    atload'load_asdf' \
      zdharma/null
fi

zinit pack"bgn-binary" for fzf
zinit pack"bgn" for fzy

# if command -v starship &> /dev/null
# then
#   eval "$(starship init zsh)"
# else
  zinit ice atload'!source ~/.p10k.zsh' lucid nocd
  zinit light romkatv/powerlevel10k
# fi

zinit ice as"program" from"gh-r" mv"exa* -> exa" pick"exa/exa" lucid atload"alias ls='exa --icons'"
zinit light ogham/exa

# Load my zsh dotfiles, aliases
zinit light-mode is-snippet lucid for \
  id-as"aliases" \
    $HOME/.dotfiles/zsh/config/00_aliases.zsh \
  id-as"options" \
    $HOME/.dotfiles/zsh/config/10_options.zsh \
  id-as"functions" \
    $HOME/.dotfiles/zsh/config/20_functions.zsh

# Oh-My-Zsh Plugins (Stress test!)
# zinit wait lucid for \
#   OMZP::iterm2 \
#   OMZP::nmap \
#   OMZP::repo \
#   OMZP::node \
#   OMZP::cp \
#   OMZP::ruby \
#   OMZP::timer \
#   OMZP::dash \
#   OMZP::tmux \
#   OMZP::gcloud \
#   OMZP::tmuxinator \
#   OMZP::gem \
#   OMZP::git \
#   OMZP::aws \
#   OMZP::battery \
#   OMZP::git-flow \
#   OMZP::docker-compose \
#   OMZP::kubectl \
#   OMZP::brew \
#   OMZP::git-remote-branch \
#   OMZP::vi-mode \
#   OMZP::bundler \
#   OMZP::dotenv \
#   OMZP::pip \
#   OMZP::github \
#   OMZP::gitignore \
#   OMZP::vscode \
#   OMZP::emacs \
#   OMZP::gnu-utils \
#   OMZP::lol \
#   OMZP::postgres \
#   OMZP::sudo \
#   OMZP::wd \
#   OMZP::man \
#   OMZP::xcode \
#   OMZP::yarn \
#   OMZP::python \
#   OMZP::minikube \
#   OMZP::rails \
#   OMZP::coffee \
#   OMZP::helm \
#   OMZP::rake \
#   OMZP::heroku \
#   OMZP::rake-fast \
#   OMZP::history \
#   OMZP::rbenv \
#   OMZP::ruby

# Highlight selection in tab completion
zstyle ':completion:*' menu select

# Compinit : After zinits, before cdreplay
# https://carlosbecker.com/posts/speeding-up-zsh/
autoload -Uz compinit
if [ $(date +'%j') != $(stat -f '%Sm' -t '%j' ~/.zcompdump) ]; then
  compinit;
else
  compinit -C;
fi

zinit cdreplay -q

# Kitty autocompletion (Place after compinit)
# Commented out since `kitty + complete zsh` hangs on Apple Silicon build
# if command -v kitty &> /dev/null
# then
#   # Note: Use wait 1 second works for kitty completion
#   zinit light-mode wait"1" lucid for \
#       atload='source <(kitty + complete setup zsh) ; zpcdreplay' \
#         zdharma/null
# fi

if command -v starship &> /dev/null; then
  zinit light-mode wait"0" lucid for \
    atload='source <(flux completion zsh) && compdef _flux flux' \
     zdharma/null
fi

# Key bindings for zsh-history-substring-search
_history_substring_search_bind_keys() {
  bindkey '^[[A' history-substring-search-up
  bindkey '^[[B' history-substring-search-down
  bindkey -M emacs '^P' history-substring-search-up
  bindkey -M emacs '^N' history-substring-search-down
  bindkey -M vicmd 'k' history-substring-search-up
  bindkey -M vicmd 'j' history-substring-search-down
}

if [ -d "$HOME/.asdf/plugins/java" ]; then
  zinit light-mode wait lucid for \
    atload='source $HOME/.asdf/plugins/java/set-java-home.zsh' \
      zdharma/null
fi

if [ -d "$HOME/.rbenv" ]; then
  zinit light-mode wait lucid for \
    atload'eval "$(rbenv init - --no-rehash)"' \
      zdharma/null
fi

if [ -d "$HOME/.jenv" ]; then
  export PATH="$HOME/.jenv/bin:$PATH"

  zinit light-mode wait lucid for \
    atload'eval "$(jenv init -)"' \
      zdharma/null
fi

# Timing App Terminal Support
if [ $ITERM_SESSION_ID ]; then
  DISABLE_AUTO_TITLE="true"
  echo -ne "\033]0; @ ${HOST%%.*} : ${PWD/#$HOME/~} \007"
fi

precmd() {
  echo -ne "\033]0; @ ${HOST%%.*} : ${PWD/#$HOME/~} \007"
}

# source ~/.bashhub/bashhub.zsh
if [ -f ~/.bashhub/bashhub.zsh ]; then
  zinit light-mode wait lucid for \
    atload='source $HOME/.bashhub/bashhub.zsh' \
      zdharma/null
fi

# Override zinit m() function
# Ref: https://github.com/zdharma/zinit/commit/7ed6ab9dc535a079275a721bf3e7b4713900430c
m() {
  git commit -m "$*"
}

# Apple Silicon
if [[ "$(uname -m)" == "arm64" ]]; then
  # Use arm64 brew, with fallback to x86 brew
  if [ -f /opt/homebrew/bin/brew ]; then
    export PATH="/usr/local/bin${PATH+:$PATH}";
    eval $(/opt/homebrew/bin/brew shellenv)
  fi
else
  # Use x86 brew, with fallback to arm64 brew
  if [ -f /usr/local/bin/brew ]; then
    export PATH="/opt/homebrew/bin${PATH+:$PATH}";
    eval $(/usr/local/bin/brew shellenv)
  fi
fi

if [ -f "$HOME/.zshrc.local" ]; then
  source "$HOME/.zshrc.local"
fi

# NixOS
if [ -e ~/.nix-profile/etc/profile.d/nix.sh ]; then
  . ~/.nix-profile/etc/profile.d/nix.sh;
fi

# Zoxide : prompt hook mode
eval "$(zoxide init zsh --hook prompt)"
